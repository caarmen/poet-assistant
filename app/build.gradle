/*
 * Copyright (c) 2016 Carmen Alvarez
 *
 * This file is part of Poet Assistant.
 *
 * Poet Assistant is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Poet Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Poet Assistant.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "ca.rmen.android.poetassistant"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 11302
        versionName "1.13.2"
        // setting vectorDrawables.useSupportLibrary = true means pngs won't be generated at
        // build time: http://android-developers.blogspot.fr/2016/02/android-support-library-232.html
        vectorDrawables.useSupportLibrary = true
        jackOptions {
            enabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Attempted workaround for build failure for f-droid
    // https://gitlab.com/fdroid/fdroiddata/issues/585
    // https://github.com/greenrobot/greenDAO/issues/352
    sourceSets {
        main.java.srcDirs += 'build/generated/source/greendao'
    }

    File signFile = rootProject.file('signing.properties')
    if (signFile.exists()) {
        Properties p = new Properties();
        p.load(new FileInputStream(signFile))

        signingConfigs {
            release {
                keyAlias p.KeyAlias
                keyPassword p.KeyPassword
                storeFile file(p.StoreFile)
                storePassword p.StorePassword
            }
        }
        android.buildTypes.release.signingConfig = signingConfigs.release
    } else {
        android.buildTypes.release.signingConfig = null
    }
}

android.applicationVariants.all { variant ->
    variant.mergeAssets.doLast {
        copy {
            from project.rootDir
            into "${project.buildDir}/intermediates/assets/${variant.buildType.name}"
            include 'LICENSE.txt'
            include 'LICENSE-rhyming-dictionary.txt'
            include 'LICENSE-thesaurus-wordnet.txt'
            include 'LICENSE-dictionary-wordnet.txt'
            include 'LICENSE-google-ngram-dataset.txt'
        }
    }
}

repositories {
    jcenter();
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'
    }
}


greendao {
    schemaVersion 1
}

dependencies {
    annotationProcessor 'org.jraf:prefs-compiler:1.1.1'

    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support:design:25.1.0'
    compile 'com.android.support:preference-v7:25.1.0'
    compile 'com.android.support:preference-v14:25.1.0'
    compile 'net.sourceforge.streamsupport:streamsupport:1.5.3'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'org.greenrobot:greendao:3.2.0'
    compile 'ca.rmen:rhymer:1.1.2'
    compile 'ca.rmen:porter-stemmer:1.0.0'
    compile 'org.jraf:prefs:1.1.1'
    compile 'com.google.dagger:dagger:2.8'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.8'

    testCompile 'junit:junit:4.12'

}

// Only show real releases with the ben-manes plugin.
dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
