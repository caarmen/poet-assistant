/*
 * Copyright (c) 2016-2017 Carmen Alvarez
 *
 * This file is part of Poet Assistant.
 *
 * Poet Assistant is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Poet Assistant is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Poet Assistant.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion 27
    buildToolsVersion "26.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError true
        textReport true
        ignoreWarnings true
        disable 'RestrictedApi'  // https://stackoverflow.com/questions/45648530/restricted-api-lint-error-when-deleting-table-room-persistence
    }

    defaultConfig {
        applicationId "ca.rmen.android.poetassistant"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 112400
        versionName "1.24.0"
        // setting vectorDrawables.useSupportLibrary = true means pngs won't be generated at
        // build time: http://android-developers.blogspot.fr/2016/02/android-support-library-232.html
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        // used by Room, to test migrations
        sourceSets {
            main.java.srcDirs += "$projectDir/src/main/kotlin"
            androidTest.assets.srcDirs +=
                    files("$projectDir/src/androidTest/schemas".toString())
            test {
                manifest.srcFile "src/test/AndroidManifest.xml"
            }
        }

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
            applicationIdSuffix = ".test"
            resValue "string", "search_provider_authority", android.defaultConfig.applicationId + applicationIdSuffix + ".SuggestionsProvider"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "search_provider_authority", android.defaultConfig.applicationId + ".SuggestionsProvider"
        }
    }

    testOptions {
        unitTests {
            all {
                jvmArgs '-noverify', '-ea'
            }
            includeAndroidResources = true
        }
    }

    if (rootProject.hasProperty("AndroidSigningKeyAlias")
            && rootProject.hasProperty("AndroidSigningKeyPassword")
            && rootProject.hasProperty("AndroidSigningStoreFile")
            && rootProject.hasProperty("AndroidSigningStorePassword")) {
        println "Using signing properties from gradle properties"
        signingConfigs {
            release {
                keyAlias rootProject.AndroidSigningKeyAlias
                keyPassword rootProject.AndroidSigningKeyPassword
                storeFile file(rootProject.AndroidSigningStoreFile)
                storePassword rootProject.AndroidSigningStorePassword
            }
            android.buildTypes.release.signingConfig = signingConfigs.release
        }
    } else if (System.env.AndroidSigningKeyPassword != null
                && System.env.AndroidSigningKeyPassword != null
                && System.env.AndroidSigningStoreFile != null
                && System.env.AndroidSigningStorePassword != null) {
        println "Using signing properties from environment variables"
            signingConfigs {
                release {
                    keyAlias System.env.AndroidSigningKeyAlias
                    keyPassword System.env.AndroidSigningKeyPassword
                    storeFile file(System.env.AndroidSigningStoreFile)
                    storePassword System.env.AndroidSigningStorePassword
                }
                android.buildTypes.release.signingConfig = signingConfigs.release
            }
    } else {
        println "No signing properties found"
        android.buildTypes.release.signingConfig = null
    }
}

jacoco {
    toolVersion '0.7.9'
}
android.applicationVariants.all { variant ->
    variant.mergeAssets.doLast {
        copy {
            from project.rootDir
            into "${project.buildDir}/intermediates/assets/${variant.buildType.name}"
            include 'LICENSE.txt'
            include 'LICENSE-rhyming-dictionary.txt'
            include 'LICENSE-thesaurus-wordnet.txt'
            include 'LICENSE-dictionary-wordnet.txt'
            include 'LICENSE-google-ngram-dataset.txt'
        }
    }
}

project.gradle.taskGraph.whenReady {
    connectedDebugAndroidTest {
        ignoreFailures = true
    }
}

repositories {
    google()
    jcenter()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.1'
    }
}

dependencies {

    implementation "com.android.support:appcompat-v7:$support_lib_version"
    implementation "com.android.support:design:$support_lib_version"
    implementation "com.android.support:preference-v7:$support_lib_version"
    implementation "com.android.support:preference-v14:$support_lib_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'ca.rmen:rhymer:1.2.0'
    implementation 'ca.rmen:porter-stemmer:1.0.0'
    implementation "org.jraf:prefs:$prefs_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "io.reactivex.rxjava2:rxjava:2.1.6"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation "android.arch.lifecycle:extensions:$arch_version"
    implementation "android.arch.lifecycle:common-java8:$arch_version"
    implementation "android.arch.persistence.room:runtime:$arch_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    kapt "android.arch.persistence.room:compiler:$arch_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "org.jraf:prefs-compiler:$prefs_version"

    androidTestImplementation "android.arch.persistence.room:testing:$arch_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.robolectric:robolectric:3.5.1"

    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leak_canary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"

    androidTestImplementation group: 'org.easytesting', name: 'fest-reflect', version: '1.4.1'

    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    // Necessary to have Kotlin and dataBinding at the same time
    kapt "com.android.databinding:compiler:$gradle_plugin_version"  // <- Ici
}

// Only show real releases with the ben-manes plugin.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'alpha-preview', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if ("com.android.databinding" == selection.candidate.group) {
                rejected = true
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
task jacocoTestReport(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
    reports {
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ["**/R.class", "**/R*.class", "**/Manifest.class", "**/Manifest*.class", "**/BuildConfig.class",
                       // ignore databinding generated code:
                       "ca/rmen/android/poetassistant/databinding/*.class",
                       "ca/rmen/android/poetassistant/BR.class",
                       // ignore dagger generated code:
                       "ca/rmen/android/poetassistant/settings/SettingsEditorWrapper.class",
                       "ca/rmen/android/poetassistant/settings/SettingsPrefs.class",
                       "ca/rmen/android/poetassistant/**/DaggerAppComponent*.class",
                       "ca/rmen/android/poetassistant/**/*_Factory.class",
                       "ca/rmen/android/poetassistant/**/*_Provides*.class",
                       "ca/rmen/android/poetassistant/**/*Injector.class",
                       // ignore generated code not in our package
                       "android/databinding/**/*.class",
                       "com/android/**/*.class"])
    sourceDirectories = files("${project.projectDir}/src/main/java")
    executionData = fileTree(
            dir: "${buildDir}",
            includes: [
                    "jacoco/testDebugUnitTest.exec",
                    "outputs/code-coverage/connected/*coverage.ec"
            ])
}

// Necessary for Prefs to work (see https://kotlinlang.org/docs/reference/kapt.html)
kapt {
    correctErrorTypes = true
}
